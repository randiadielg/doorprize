{"version":3,"file":"static/js/471.36bd40d0.chunk.js","mappings":"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","sources":["constants/index.ts","hooks/useDoorprizeWebsocket.ts","hooks/useGet.ts","routes/Leaderboard/Leaderboard.tsx"],"sourcesContent":["export const SERVER_HOST = process.env.REACT_APP_SERVER_HOST || \"\";\nexport const DOORPRIZE_WS_HOST = process.env.REACT_APP_DOORPRIZE_WS_HOST || \"\";\n","import { useState, useEffect } from \"react\";\nimport { w3cwebsocket } from \"websocket\";\nimport { DOORPRIZE_WS_HOST } from \"../constants\";\n\nlet client = new w3cwebsocket(DOORPRIZE_WS_HOST);\n\ninterface UseDoorprizeWebsocketProps {\n  onStop?: () => void;\n  onGetNumber?: () => void;\n}\n\nconst useDoorprizeWebsocket = (props?: UseDoorprizeWebsocketProps) => {\n  const { onStop = () => {}, onGetNumber = () => {} } = props || {};\n  const [isRandomizing, setIsRandomizing] = useState(false);\n  const [number, setNumber] = useState<number>();\n  const [name, setName] = useState<string>(\"\");\n  const [isDisconnected, setIsDisconnected] = useState(true);\n\n  useEffect(() => {\n    client.onopen = () => {\n      setIsDisconnected(false);\n      console.log(\"WebSocket Client Connected\");\n    };\n    client.onmessage = (message) => {\n      const stringMessage = message.data.toString();\n      try {\n        if (stringMessage === \"stop\") {\n          setIsRandomizing(false);\n          onStop();\n        } else {\n          const { name, index } = JSON.parse(stringMessage);\n\n          setNumber(parseInt(index));\n          setName(name);\n          setIsRandomizing(true);\n          onGetNumber();\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    client.onclose = () => {\n      setIsDisconnected(true);\n    };\n\n    client.onerror = (err) => {\n      console.error(\n        \"Socket encountered error: \",\n        err.message,\n        \"Closing socket\"\n      );\n      client.close();\n    };\n  }, [onStop, onGetNumber]);\n\n  return { isRandomizing, number, name, isDisconnected };\n};\n\nexport default useDoorprizeWebsocket;\n","import axios, { AxiosResponse } from \"axios\";\nimport { useState, useEffect, useCallback } from \"react\";\n\nconst useGet = (url: string) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const [data, setData] = useState<AxiosResponse | null>(null);\n  const loadData = useCallback(async () => {\n    try {\n      setLoading(true);\n      const actionData = await axios.get(url);\n      setData(actionData);\n    } catch (e: any) {\n      setError(e);\n    } finally {\n      setLoading(false);\n    }\n  }, [url]);\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n  return { data: data?.data, loading, error, refetch: loadData };\n};\n\nexport default useGet;\n","import { SERVER_HOST } from \"../../constants\";\nimport { Alert, Card, Space, Typography } from \"antd\";\nimport useGet from \"../../hooks/useGet\";\n\nimport useDoorprizeWebsocket from \"../../hooks/useDoorprizeWebsocket\";\n\nconst LeaderboardView = () => {\n  const { data, refetch } = useGet(`${SERVER_HOST}/winners`);\n  const { data: arrayOfWinners, refetch: arrayRefetch } = useGet(\n    `${SERVER_HOST}/winners/array`\n  );\n\n  const { isDisconnected } = useDoorprizeWebsocket({\n    onStop: () => {\n      refetch();\n      arrayRefetch();\n    },\n  });\n  return (\n    <>\n      {isDisconnected && (\n        <Alert message=\"Connection Disconnected, Please Refresh\" type=\"error\" />\n      )}\n      <Space size={[8, 16]} wrap>\n        {(arrayOfWinners || []).map((number: number) => {\n          if (!data[number]?.isCancelled && data[number]?.isWin) {\n            return (\n              <Card style={{ minWidth: \"120px\", background: \"#FFFDD0\" }}>\n                <Typography.Title\n                  style={{ margin: \"0\", textAlign: \"center\" }}\n                  level={1}\n                >\n                  {number}\n                </Typography.Title>\n              </Card>\n            );\n          }\n          return null;\n        })}\n      </Space>\n    </>\n  );\n};\n\nexport default LeaderboardView;\n"],"names":["SERVER_HOST","process","DOORPRIZE_WS_HOST","client","w3cwebsocket","props","onStop","onGetNumber","useState","isRandomizing","setIsRandomizing","number","setNumber","name","setName","isDisconnected","setIsDisconnected","useEffect","onopen","console","log","onmessage","message","stringMessage","data","toString","JSON","parse","index","parseInt","err","error","onclose","onerror","close","url","loading","setLoading","setError","setData","loadData","useCallback","axios","actionData","refetch","useGet","arrayOfWinners","arrayRefetch","useDoorprizeWebsocket","type","size","wrap","map","isCancelled","isWin","style","minWidth","background","margin","textAlign","level"],"sourceRoot":""}